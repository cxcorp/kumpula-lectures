import { useContext, useState, useEffect, createContext, useMemo } from "react";
import Head from "next/head";
import Image from "next/image";
import axios from "axios";

import "@itcenteratunihelsinki/huds-lib/dist/fonts/fonts.css";
import "@itcenteratunihelsinki/huds-lib/dist/huds-lib/huds-lib.css";
import styles from "../styles/Home.module.scss";
import { useLocalizationContext } from "../components/LocalizationContext";
import WeekCalendar from "../components/WeekCalendar";
import { Header } from "../components/Header";

export async function getServerSideProps(context) {
  const res = await axios.get(
    "http://127.0.0.1:3001/api/events-by-organisation"
  );
  if (res.data.status !== "ok") {
    return {
      props: {
        events: {
          "organisations-by-id": {},
          events: {},
        },
      },
    };
  }

  return {
    props: {
      events: res.data.data,
    },
  };
}

const getTodayUnixTimestamps = () => {
  const date = new Date();
  date.setHours(0);
  date.setMinutes(0);
  date.setMilliseconds(0);
  const start = date.getTime();
  date.setHours(23);
  date.setMinutes(59);
  date.setMilliseconds(999);
  const end = date.getTime();
  return { start, end };
};

/**
 * @param {{ events: import("../api").Event[] }} props
 */
function TodaysLectures({ events }) {
  const todayEvents = useMemo(() => {
    // let's hope nobody keeps tab open over night
    const today = getTodayUnixTimestamps();
    return events.filter(
      (ev) =>
        Date.parse(ev.end) >= today.start || Date.parse(ev.start) <= today.end
    );
  });

  return (
    <div>
      {todayEvents.map((e) => (
        <div
          key={`${e.courseDetailsId}-${e.start}-${e.location}`}
          style={{
            borderRadius: "5px",
            boxShadow: "0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24)",
            marginBottom: "0.75rem ",
            fontSize: "0.9rem",
            textAlign: "left",
          }}
        >
          <div
            style={{
              padding: "0.5rem 1rem",
              background: "#f3f3f6",
              fontWeight: "500",
            }}
          >
            {e.lectureName}
          </div>
          <div style={{ padding: "0.5rem 1rem" }}>
            <p style={{ marginTop: "0" }}>{e.studyGroupType}</p>
            <p>
              {e.start} - {e.end}
            </p>
            <p style={{ marginBottom: "0" }}>{e.exactumClass}</p>
          </div>
        </div>
      ))}
    </div>
  );
}

/**
 * @param {{ events: import("../api").Data }} props
 */
function LectureList({ events }) {
  const { l } = useLocalizationContext();

  const sortedOrganizations = Object.values(events["organisations-by-id"]).sort(
    (a, b) => l(a.name).localeCompare(l(b.name))
  );

  const [selectedOrganisation, setSelectedOrganisation] = useState(
    sortedOrganizations[0].id
  );

  return (
    <div>
      <div style={{ borderBottom: "2px solid grey", padding: "0 0 1rem 0" }}>
        Organization:
        <select
          value={selectedOrganisation}
          onChange={(e) => setSelectedOrganisation(e.currentTarget.value)}
        >
          {Object.values(events["organisations-by-id"])
            .sort((a, b) => l(a.name).localeCompare(l(b.name)))
            .map(({ id, name }) => (
              <option key={id} value={id}>
                {l(name)}
              </option>
            ))}
        </select>
      </div>
      <div style={{ marginTop: "1rem" }}>
        <WeekCalendar events={events.events[selectedOrganisation] || []} />
        <TodaysLectures events={events.events[selectedOrganisation]} />
      </div>
    </div>
  );
}

/**
 * @param {{ events: import("../api").Data }} props
 */
export default function Home({ events }) {
  const { langs, setLang } = useLocalizationContext();

  return (
    <div className={styles.container}>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {/* <Header /> */}

      <main className={styles.main}>
        <h1 className={styles.title}>
          Luentolista <span className={styles.title__emphasis}>Exactum</span>
        </h1>

        <div className={styles.description}>
          <div>
            Lang:{" "}
            <select
              onChange={(e) => {
                setLang(e.currentTarget.value);
              }}
            >
              {langs.map((lang) => (
                <option key={lang} value={lang}>
                  {lang}
                </option>
              ))}
            </select>
          </div>
          <LectureList events={events} />
        </div>
      </main>

      <footer className={styles.footer}>footer</footer>
    </div>
  );
}
